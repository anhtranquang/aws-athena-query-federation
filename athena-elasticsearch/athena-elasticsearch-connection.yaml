Transform: 'AWS::Serverless-2016-10-31'

Metadata:
  AWS::ServerlessRepo::Application:
    Name: AthenaElasticsearchConnectorWithGlueConnection
    Description: 'This connector enables Amazon Athena to communicate with your Elasticsearch instance(s).'
    Author: 'default author'
    SpdxLicenseId: Apache-2.0
    LicenseUrl: LICENSE.txt
    ReadmeUrl: README.md
    Labels: ['athena-federation']
    HomePageUrl: https://github.com/awslabs/aws-athena-query-federation
    SemanticVersion: 2022.47.1
    SourceCodeUrl: https://github.com/awslabs/aws-athena-query-federation

# Parameters are CloudFormation features to pass input
# to your template when you create a stack
Parameters:
  LambdaFunctionName:
    Description: 'This is the name of the lambda function that will be created. This name must satisfy the pattern ^[a-z0-9-_]{1,64}$'
    Type: String
    AllowedPattern: ^[a-z0-9-_]{1,64}$
  SecretName:
    Description: 'Used to create resource-based authorization policy for "secretsmanager:GetSecretValue" action. E.g. All Athena Elasticsearch Federation secret names can be prefixed with "AthenaESFederation" and authorization policy will allow "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:AthenaESFederation*". Parameter value in this case should be "AthenaESFederation". If you do not have a prefix, you can manually update the IAM policy to add allow any secret names.'
    Type: String
    Default: ""
  SpillBucket:
    Description: 'The name of the bucket where this function can spill data.'
    Type: String
  SecurityGroupIds:
    Description: '**If IsVPCAccess is True**. Provide one or more SecurityGroup IDs corresponding to the SecurityGroup that should be applied to the Lambda function. (e.g. sg1,sg2,sg3)'
    Type: CommaDelimitedList
    Default: ""
  SubnetIds:
    Description: '**If IsVPCAccess is True**. Provide one or more Subnet IDs corresponding to the Subnet that the Lambda function can use to access you data source. (e.g. subnet1,subnet2)'
    Type: CommaDelimitedList
    Default: ""
  GlueConnection:
    Description: "Name of glue connection storing connection details for Federated Data source."
    Type: String
  KmsKeyId:
    Description: "(Optional) By default any data that is spilled to S3 is encrypted using AES-GCM and a randomly generated key. Setting a KMS Key ID allows your Lambda function to use KMS for key generation for a stronger source of encryption keys."
    Type: String
    Default: ""
  LambdaRoleArn:
    Description: "(Optional) A custom role to be used by the Connector lambda"
    Type: String
    Default: ""


Conditions:
  HasSecurityGroups: !Not [ !Equals [ !Join ["", !Ref SecurityGroupIds], "" ] ]
  HasSubnets: !Not [ !Equals [ !Join ["", !Ref SubnetIds], "" ] ]
  NotHasLambdaRole: !Equals [!Ref LambdaRoleArn, ""]
  HasKMSKeyId: !Not [!Equals [!Ref KmsKeyId, ""]]
  NotHasLambdaRoleAndHasKMSKeyId: !And
    - !Condition NotHasLambdaRole
    - !Condition HasKMSKeyId

Resources:
  ConnectorConfig:
    Type: 'AWS::Serverless::Function'
    Properties:
      Environment:
        Variables:
          glue_connection: !Ref GlueConnection
      FunctionName: !Ref LambdaFunctionName
      Handler: "com.amazonaws.athena.connectors.elasticsearch.ElasticsearchCompositeHandler"
      CodeUri: "./target/athena-elasticsearch-2022.47.1.jar"
      Description: "The Elasticsearch Lambda Connector provides Athena users the ability to query data stored on Elasticsearch clusters."
      Runtime: java11
      Timeout: 900
      MemorySize: 3008
      Role: !If [NotHasLambdaRole, !GetAtt FunctionRole.Arn, !Ref LambdaRoleArn]
      VpcConfig:
        SecurityGroupIds: !If [ HasSecurityGroups, !Ref SecurityGroupIds, !Ref "AWS::NoValue" ]
        SubnetIds: !If [ HasSubnets, !Ref SubnetIds, !Ref "AWS::NoValue" ]


FunctionRole:
    Condition: NotHasLambdaRole
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
                - "sts:AssumeRole"
      Policies:
        #S3CrudPolicy allows our connector to spill large responses to S3. You can optionally replace this pre-made policy
        #with one that is more restrictive and can only 'put' but not read,delete, or overwrite files.
        - S3CrudPolicy:
            BucketName: !Ref SpillBucket
                  
  FunctionExecutionPolicy:
    Condition: NotHasLambdaRole
    Type: "AWS::IAM::Policy"
    Properties:
      Roles:
        - !Ref FunctionRole
      PolicyName: FunctionExecutionPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - secretsmanager:GetSecretValue
            Effect: Allow
            Resource: !Sub 'arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${SecretName}'
          - Action:
              - es:List*
              - es:Describe*
              - es:ESHttp*
              - glue:GetTableVersions
              - glue:GetPartitions
              - glue:GetTables
              - glue:GetTableVersion
              - glue:GetDatabases
              - glue:GetTable
              - glue:GetPartition
              - glue:GetDatabase
              - athena:GetQueryExecution
              - s3:ListAllMyBuckets
            Effect: Allow
            Resource: '*'
          - Action:
            - glue:GetConnection
            Effect: Allow
            Resource:
              - !Sub 'arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:connection/${GlueConnection}'
              - !Sub 'arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog'

  FunctionKMSPolicy:
    Condition: NotHasLambdaRoleAndHasKMSKeyId
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: FunctionKMSPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
             - kms:GenerateRandom
            Resource: '*'
          - Effect: Allow
            Action:
              - kms:GenerateDataKey
            Resource: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}"
      Roles:
        - !Ref FunctionRole