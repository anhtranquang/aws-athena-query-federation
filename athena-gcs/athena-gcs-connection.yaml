Transform: 'AWS::Serverless-2016-10-31'

Metadata:
  AWS::ServerlessRepo::Application:
    Name: AthenaGCSConnectorWithGlueConnection
    Description: 'This connector enables Amazon Athena to communicate with Google Cloud Storage (GCS) and fetch data from Parquet file format'
    Author: 'default author'
    SpdxLicenseId: Apache-2.0
    LicenseUrl: LICENSE.txt
    ReadmeUrl: README.md
    Labels: ['athena-federation', 'GCS', 'Google-Cloud-Storage', 'parquet', 'csv']
    HomePageUrl: https://github.com/awslabs/aws-athena-query-federation
    SemanticVersion: 2022.47.1
    SourceCodeUrl: https://github.com/awslabs/aws-athena-query-federation

Parameters:
  LambdaFunctionName:
    Description: 'The name you will give to this catalog is a Lambda name for Athena. Athena will use this name as the function name. This name must satisfy the pattern ^[a-z0-9-_]{1,64}$'
    Type: String
    AllowedPattern: ^[a-z0-9-_]{1,64}$
  SpillBucket:
    Description: 'The name of the bucket where this function can spill data.'
    Type: String
  SecretManagerGcpCredsName:
    Description: 'Secret key name in the AWS Secrets Manager.'
    Type: String
  GlueConnection:
    Description: "Name of glue connection storing connection details for Federated Data source."
    Type: String
  KmsKeyId:
    Description: "(Optional) By default any data that is spilled to S3 is encrypted using AES-GCM and a randomly generated key. Setting a KMS Key ID allows your Lambda function to use KMS for key generation for a stronger source of encryption keys."
    Type: String
    Default: ""
  LambdaRoleArn:
    Description: "(Optional) A custom role to be used by the Connector lambda"
    Type: String
    Default: ""


Conditions:
  NotHasLambdaRole: !Equals [!Ref LambdaRoleArn, ""]
  HasKMSKeyId: !Not [!Equals [!Ref KmsKeyId, ""]]
  NotHasLambdaRoleAndHasKMSKeyId: !And
    - !Condition NotHasLambdaRole
    - !Condition HasKMSKeyId
Resources:
  AthenaGCSConnector:
    Type: 'AWS::Serverless::Function'
    Properties:
      Environment:
        Variables:
          glue_connection: !Ref GlueConnection
      FunctionName: !Ref LambdaFunctionName
      Handler: "com.amazonaws.athena.connectors.gcs.GcsCompositeHandler"
      CodeUri: "./target/athena-gcs.zip"
      Description: "Amazon Athena GCS Connector"
      Runtime: java11
      Timeout: 900
      MemorySize: 3008
      Role: !If [NotHasLambdaRole, !GetAtt FunctionRole.Arn, !Ref LambdaRoleArn]

  FunctionRole:
    Condition: NotHasLambdaRole
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
                - "sts:AssumeRole"
      Policies:
        - S3ReadPolicy:
            BucketName:
              Ref: SpillBucket
        - S3WritePolicy:
            BucketName:
              Ref: SpillBucket
                  
  FunctionExecutionPolicy:
    Condition: NotHasLambdaRole
    Type: "AWS::IAM::Policy"
    Properties:
      Roles:
        - !Ref FunctionRole
      PolicyName: FunctionExecutionPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - athena:GetQueryExecution
              - s3:ListAllMyBuckets
              - glue:GetTableVersions
              - glue:GetPartitions
              - glue:GetTables
              - glue:GetTableVersion
              - glue:GetDatabases
              - glue:GetTable
              - glue:GetPartition
              - glue:GetDatabase
            Effect: Allow
            Resource: '*'
          - Action:
              - s3:ListBucket
            Effect: Allow
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${SpillBucket}'
          - Action:
              - secretsmanager:GetSecretValue
            Effect: Allow
            Resource: !Sub 'arn:${AWS::Partition}:secretsmanager:*:*:secret:${SecretManagerGcpCredsName}'
          - Action:
            - glue:GetConnection
            Effect: Allow
            Resource:
              - !Sub 'arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:connection/${GlueConnection}'
              - !Sub 'arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog'

  FunctionKMSPolicy:
    Condition: NotHasLambdaRoleAndHasKMSKeyId
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: FunctionKMSPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
             - kms:GenerateRandom
            Resource: '*'
          - Effect: Allow
            Action:
              - kms:GenerateDataKey
            Resource: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}"
      Roles:
        - !Ref FunctionRole